application properties:

1. spring.application.name=Assignmentsubmission
Explanation:
This line sets the name of your Spring Boot application to "Assignmentsubmission". 
The application name is used internally by Spring Boot for things like logging and management. 
It's a way to identify your application within a microservices architecture, or when multiple Spring Boot applications are running.


2. spring.datasource.url=jdbc:mysql://localhost:3306/assignment_submission_db
Explanation:
This sets the URL for the database connection.
jdbc:mysql:// specifies that you're using the MySQL JDBC driver.
localhost:3306 indicates that your MySQL database is hosted on your local machine (localhost) and is listening on port 3306, which is the default port for MySQL.
assignment_submission_db is the name of the specific database you're connecting to. 
So, this line tells Spring Boot where to find the MySQL database it should use.

3. spring.datasource.username=root
Explanation:
This sets the username that your application will use to connect to the MySQL database.
In this case, the username is root, which is the default administrative user in MySQL.

4. spring.datasource.password=root
Explanation:
This sets the password for the database connection. The application uses this password in combination with the username to log into the database.
root here is the password for the root user.

5. spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect
Explanation:
JPA (Java Persistence API) is a specification for managing relational data in Java applications.
Hibernate is an implementation of JPA that handles the object-relational mapping (ORM) between Java objects and database tables.
org.hibernate.dialect.MySQLDialect specifies that Hibernate should use the MySQL dialect, which is a set of rules and configurations for generating SQL that works with a MySQL database. 
This tells Hibernate how to translate its operations into SQL statements that MySQL can understand.

6. spring.jpa.show-sql=true
Explanation:
This setting tells Hibernate to output the generated SQL statements to the console.
It's useful for debugging and understanding what queries are being executed by your application.

7. spring.jpa.hibernate.ddl-auto=update
Explanation:
ddl-auto stands for "Data Definition Language auto", and it controls how Hibernate manages the database schema.
Setting this to update means that Hibernate will automatically update the database schema when the application starts. It will create or alter tables as necessary to match the entity mappings in your Java code.
Other possible values include none, validate, create, and create-drop.
none: Does nothing with the database schema.
validate: Validates the schema, making sure it matches the entities but doesn't make changes.
create: Drops the existing schema and creates it again on each run.
create-drop: Drops the schema when the application shuts down after creating it.

Summary:
This configuration file sets up a Spring Boot application named "Assignmentsubmission" 
to connect to a MySQL database running locally on your machine.
 It specifies the database credentials, sets up Hibernate as the JPA provider with MySQL dialect, 
 
 and configures Hibernate to automatically update the database schema as needed. 
 The SQL statements generated by Hibernate will be printed to the console for debugging purposes
 
 
 
DIFFERENT PARTS: TO UNDERSTAND CLASS AND WHICH SHUD BE A PROPERTY OF OTHER CLASSES


USER -- (CLASS) -- database table
 --role (student,code reviewer, Administrator )
 --cohortStartDate
 --assignments :List<Assignments>
  
 assignment - CLASS -- database table
  --status(pending,submitted,in review,needs updated,completed) : String
  --githubURL : String
  --branch: String
  --codeVideoURL :String
  --assignedTo : User
  

 emailnotificationService -- CLASS
  --messageBody
  --subjectLine
  --toAdreess
  --FromAdresss
  
 
 UserService
  --createUser


 [ 1 user can have many assignments
  1 assignment can have many users

  1... * and * ...1 ---> *...* ]
 
 
--> consider both the  classes to get the relations ### --> @shaanpradeep


 
 
 
 
 
 
 